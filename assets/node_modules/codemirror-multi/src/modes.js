import { copyObj, createObj } from "./util/misc.js"

// Known modes, by name and by MIME
export let modes = {}, mimeModes = {}

// Extra arguments are stored as the mode's dependencies, which is
// used by (legacy) mechanisms like loadmode.js to automatically
// load a mode. (Preferred mechanism is the require/define calls.)
export function defineMode(name, mode) {
  if (arguments.length > 2)
    mode.dependencies = Array.prototype.slice.call(arguments, 2)
  modes[name] = mode
}

export function defineMIME(mime, spec) {
  mimeModes[mime] = spec
}

// Given a MIME type, a {name, ...options} config object, or a name
// string, return a mode config object.
// 给定MIME类型、{name，…options}配置对象或名称字符串，将返回模式配置对象。
export function resolveMode(spec) {
  if (typeof spec == "string" && mimeModes.hasOwnProperty(spec)) {
    spec = mimeModes[spec]
  } else if (spec && typeof spec.name == "string" && mimeModes.hasOwnProperty(spec.name)) {
    let found = mimeModes[spec.name]
    if (typeof found == "string") found = {name: found}
    spec = createObj(found, spec)
    spec.name = found.name
  } else if (typeof spec == "string" && /^[\w\-]+\/[\w\-]+\+xml$/.test(spec)) {
    return resolveMode("application/xml")
  } else if (typeof spec == "string" && /^[\w\-]+\/[\w\-]+\+json$/.test(spec)) {
    return resolveMode("application/json")
  }
  if (typeof spec == "string") return {name: spec}
  else return spec || {name: "null"}
}

// Given a mode spec (anything that resolveMode accepts), find and
// initialize an actual mode object.
// 根据CodeMirror设置的mode找到对应的模式并初始化一个实际的模式对象
export function getMode(options, spec) {
    var mfactory
    var modeObj = []
    var demo
    if (typeof spec === 'object') {
      for (var i = 0 ; i < spec.length; i++) {
        demo = resolveMode(spec[i]); // 将CodeMirror设置的mode转换为对应格式
        mfactory = modes[demo.name];
        if (!mfactory) {
          demo = resolveMode("text/plain"); // 将CodeMirror设置的mode转换为对应格式
          mfactory = modes[demo.name];
        }
        var modeObjDemo = mfactory(options, demo);
        if (modeExtensions.hasOwnProperty(demo.name)) { // spec.name是否是modeExtensions的自有属性
          var exts = modeExtensions[demo.name];
          for (var prop in exts) {
            if (!exts.hasOwnProperty(prop)) { continue }
            if (modeObjDemo.hasOwnProperty(prop)) { modeObjDemo["_" + prop] = modeObjDemo[prop]; }
            modeObjDemo[prop] = exts[prop];
          }
        }
        modeObjDemo.name = demo.name;
        if (demo.helperType) { modeObjDemo.helperType = demo.helperType; }
        if (demo.modeProps) { for (var prop$1 in demo.modeProps)
          { modeObjDemo[prop$1] = demo.modeProps[prop$1]; } }
        modeObj.push(modeObjDemo);
      }
    } else {
      demo = resolveMode(spec); // 将CodeMirror设置的mode转换为对应格式
      mfactory = modes[demo.name];
      if (!mfactory) {
        demo = resolveMode("text/plain"); // 将CodeMirror设置的mode转换为对应格式
        mfactory = modes[demo.name];
      }
      var modeObjDemo = mfactory(options, demo);
      if (modeExtensions.hasOwnProperty(demo.name)) { // spec.name是否是modeExtensions的自有属性
        var exts = modeExtensions[demo.name];
        for (var prop in exts) {
          if (!exts.hasOwnProperty(prop)) { continue }
          if (modeObjDemo.hasOwnProperty(prop)) { modeObjDemo["_" + prop] = modeObjDemo[prop]; }
          modeObjDemo[prop] = exts[prop];
        }
      }
      modeObjDemo.name = demo.name;
      if (demo.helperType) { modeObjDemo.helperType = demo.helperType; }
      if (demo.modeProps) { for (var prop$1 in demo.modeProps)
        { modeObjDemo[prop$1] = demo.modeProps[prop$1]; } }
      modeObj.push(modeObjDemo);        
    }
    return modeObj
}

// This can be used to attach properties to mode objects from
// outside the actual mode definition.
export let modeExtensions = {}
export function extendMode(mode, properties) {
  let exts = modeExtensions.hasOwnProperty(mode) ? modeExtensions[mode] : (modeExtensions[mode] = {})
  copyObj(properties, exts)
}

export function copyState(mode, state) {
  if (state === true) { return state }
  if (mode.copyState) { return mode.copyState(state) }
  var nstate = {};
  for (var n in state) {
    var val = state[n];
    if (val instanceof Array) { val = val.concat([]); }
    nstate[n] = val;
  }
  return nstate
}

// Given a mode and a state (for that mode), find the inner mode and
// state at the position that the state refers to.
// 给定一个模式和一个状态（对于该模式），在状态所指的位置找到内部模式和状态。
export function innerMode(mode, state, type) {
  let info, index
  if (type) {
    for (let i = 0; i < mode.length; i++) {
      if (mode[i].name == type) {
        index = i
      }
    }
  }
  while (mode.innerMode) {
    info = mode.innerMode(state)
    if (!info || info.mode == mode) break
    state = info.state
    mode = info.mode
  }
  return info || {mode: mode, state: state}
}

export function startState(mode, a1, a2) {
  const context = []
  for (let i = 0; i < mode.length; i++) {
    if (mode[i].startState) {
      context.push(mode[i].startState(a1, a2))
    } else {
      context.push(true)
    }
  }
  return context
}
